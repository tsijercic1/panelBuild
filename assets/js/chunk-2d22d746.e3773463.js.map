{"version":3,"sources":["webpack:///./src/views/About.vue?a579","webpack:///src/views/About.vue","webpack:///./src/views/About.vue?5ed7","webpack:///./src/views/About.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","on","checkIfExists","_v","autotestSrc","staticRenderFns","name","components","data","window","location","origin","beforeCreate","localStorage","setItem","JSON","stringify","id","languages","tools","compile","require","features","execute","environment","timeout","memory","debug","tests","mounted","registerListener","methods","button","setTimeout","addEventListener","console","log","saveClicked","conf","component","VBtn","VCard","VCol","VContainer","VRow"],"mappings":"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","file":"assets/js/chunk-2d22d746.e3773463.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('v-container',[_c('v-row',[_c('v-col',{attrs:{\"cols\":\"3\"}},[_c('v-btn',{on:{\"click\":_vm.checkIfExists}},[_vm._v(\"Check\")])],1),_c('v-col',{attrs:{\"cols\":\"9\"}},[_c('v-card',{attrs:{\"tile\":\"\"}},[_c('iframe',{attrs:{\"id\":\"generator-frame\",\"src\":_vm.autotestSrc,\"width\":\"100%\",\"height\":\"100%\"}})])],1)],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <v-container>\n    <v-row>\n      <v-col cols=\"3\">\n        <v-btn @click=\"checkIfExists\">Check</v-btn>\n      </v-col>\n      <v-col cols=\"9\">\n        <v-card tile>\n          <iframe id=\"generator-frame\" :src=\"autotestSrc\" width=\"100%\" height=\"100%\"></iframe>\n        </v-card>\n      </v-col>\n    </v-row>\n\n  </v-container>\n</template>\n\n<script>\n\nexport default {\n  name: \"About\",\n  components: {\n  },\n  data() {\n    return {\n      autotestSrc: window.location.origin + '/panel/assets/autotestGenerator/html/index.html'\n    }\n  },\n  beforeCreate() {\n    window.localStorage.setItem('.autotest-content', JSON.stringify({\n      id: 5524,\n      name: \"Tehnike programiranja (2017/2018), Zada\\u0107a 6, zadatak 1\",\n      languages: [\"C++\"],\n      tools: {\n        compile: {\n          require: \"g++\",\n          features: [\"C++11\", \"optimize\", \"warn\", \"pedantic\"]\n        },\n        \"compile[debug]\": {\n          require: \"g++\",\n          features: [\"C++11\", \"debug\"]\n        },\n        execute: {\n          environment: {\n            timeout: 10,\n            memory: 1000000\n          }\n        },\n        debug: {},\n        \"profile[memcheck]\": {\n          require: \"valgrind\",\n          features: [\"memcheck\"]\n        },\n        \"profile[sgcheck]\": {\n          require: \"valgrind\",\n          features: [\"sgcheck\"]\n        }\n      },\n      tests: [\n        {\n          parse: {\n            require_symbols: [\"Skladiste\"]\n          },\n          compile: {},\n          plagiarism: {},\n          options: [\"silent\", \"terminate\"]\n        },\n        {\n          id: 6,\n          patch: {\n            position: \"main\",\n            code:\n                'try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\n        ETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\n        ETF.DodajBure(5, \"Krv\", 1300, 150);\\n        ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        Bure *b = new Bure(15, \"Voda\", 1000, 200);\\n        ETF.DodajSpremnik(b, false);\\n        delete b;\\n        ETF.IzlistajSkladiste();\\n\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\n              \"Vrsta spremnika: Bure\\nSadrzaj: Voda\\nVlastita tezina: 15 (kg)\\nSpecificna tezina tecnosti: 1000 (kg/m^3)\\nZapremina tecnosti: 200 (l)\\nUkupna tezina: 215 (kg)\\nVrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Secer\\nVlastita tezina: 0.5 (kg)\\nTezina pohranjene materije: 40 (kg)\\nUkupna tezina: 40.5 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n            ]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 7,\n          patch: {\n            position: \"main\",\n            code:\n                '    try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\n        ETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\n        ETF.DodajBure(5, \"Krv\", 1300, 150);\\n        ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        Bure *b = new Bure(15, \"Voda\", 1000, 200);\\n        ETF.DodajSpremnik(b, false);\\n        delete b;\\n        ETF.DajNajlaksi().Ispisi();\\n        std::cout << ETF.BrojPreteskih(40) << std::endl;\\n        ETF.DajNajtezi().Ispisi();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\n              \"Vrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\\n4\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\"\n            ]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 8,\n          patch: {\n            position: \"main\",\n            code:\n                '   try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\n        ETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\n        ETF.DodajBure(5, \"Krv\", 1300, 150);\\n        Spremnik *s = ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        ETF.BrisiSpremnik(s);\\n        ETF.IzlistajSkladiste();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\n              \"Vrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n            ]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 9,\n          patch: {\n            position: \"main\",\n            code:\n                '    try\\n    {\\n\\n        Skladiste ETF;\\n        Spremnik *s = ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        ETF.BrisiSpremnik(s);\\n        ETF.DajNajtezi().Ispisi();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }\\n',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\"Skladiste je prazno\"]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 10,\n          patch: {\n            position: \"main\",\n            code:\n                '    try\\n    {\\n\\n        Skladiste ETF;\\n        Spremnik *s = ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        ETF.BrisiSpremnik(s);\\n        ETF.DajNajlaksi().Ispisi();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }\\n',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\"Skladiste je prazno\"]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 11,\n          patch: {\n            position: \"main\",\n            code:\n                '    try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.UcitajIzDatoteke(\"dummy.txt\");\\n        ETF.IzlistajSkladiste();\\n    }\\n    catch(std::logic_error le)\\n    {\\n        std::cout << le.what();\\n    }\\n',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\"Trazena datoteka ne postoji\"]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 12,\n          patch: {\n            position: \"main\",\n            code:\n                'Skladiste ETF;\\nETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\nETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\nETF.DodajBure(5, \"Krv\", 1300, 150);\\nSkladiste ETF1(std::move(ETF));\\nSkladiste ETF2;\\nETF2 = std::move(ETF1);\\nETF2.IzlistajSkladiste();',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\n              \"Vrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n            ]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        },\n        {\n          id: 13,\n          patch: {\n            position: \"main\",\n            code:\n                'Skladiste ETF;\\nETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\nETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\nETF.DodajBure(5, \"Krv\", 1300, 150);\\nSkladiste ETF1(ETF);\\nSkladiste ETF2;\\nETF2 = ETF1;\\nETF2.IzlistajSkladiste();',\n            use_markers: true\n          },\n          \"compile[debug]\": {},\n          execute: {\n            expect: [\n              \"Vrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n            ]\n          },\n          debug: {},\n          \"profile[memcheck]\": {},\n          \"profile[sgcheck]\": {}\n        }\n      ]\n    }));\n  },\n  mounted() {\n    // document.getElementById(\"generator-frame\").contentWindow.localStorage.setItem('.autotest-content', JSON.stringify({\n    //   id: 5524,\n    //   name: \"Tehnike programiranja (2017/2018), Zada\\u0107a 6, zadatak 1\",\n    //   languages: [\"C++\"],\n    //   tools: {\n    //     compile: {\n    //       require: \"g++\",\n    //       features: [\"C++11\", \"optimize\", \"warn\", \"pedantic\"]\n    //     },\n    //     \"compile[debug]\": {\n    //       require: \"g++\",\n    //       features: [\"C++11\", \"debug\"]\n    //     },\n    //     execute: {\n    //       environment: {\n    //         timeout: 10,\n    //         memory: 1000000\n    //       }\n    //     },\n    //     debug: {},\n    //     \"profile[memcheck]\": {\n    //       require: \"valgrind\",\n    //       features: [\"memcheck\"]\n    //     },\n    //     \"profile[sgcheck]\": {\n    //       require: \"valgrind\",\n    //       features: [\"sgcheck\"]\n    //     }\n    //   },\n    //   tests: [\n    //     {\n    //       parse: {\n    //         require_symbols: [\"Skladiste\"]\n    //       },\n    //       compile: {},\n    //       plagiarism: {},\n    //       options: [\"silent\", \"terminate\"]\n    //     },\n    //     {\n    //       id: 6,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             'try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\n        ETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\n        ETF.DodajBure(5, \"Krv\", 1300, 150);\\n        ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        Bure *b = new Bure(15, \"Voda\", 1000, 200);\\n        ETF.DodajSpremnik(b, false);\\n        delete b;\\n        ETF.IzlistajSkladiste();\\n\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\n    //           \"Vrsta spremnika: Bure\\nSadrzaj: Voda\\nVlastita tezina: 15 (kg)\\nSpecificna tezina tecnosti: 1000 (kg/m^3)\\nZapremina tecnosti: 200 (l)\\nUkupna tezina: 215 (kg)\\nVrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Secer\\nVlastita tezina: 0.5 (kg)\\nTezina pohranjene materije: 40 (kg)\\nUkupna tezina: 40.5 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n    //         ]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 7,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             '    try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\n        ETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\n        ETF.DodajBure(5, \"Krv\", 1300, 150);\\n        ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        Bure *b = new Bure(15, \"Voda\", 1000, 200);\\n        ETF.DodajSpremnik(b, false);\\n        delete b;\\n        ETF.DajNajlaksi().Ispisi();\\n        std::cout << ETF.BrojPreteskih(40) << std::endl;\\n        ETF.DajNajtezi().Ispisi();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\n    //           \"Vrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\\n4\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\"\n    //         ]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 8,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             '   try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\n        ETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\n        ETF.DodajBure(5, \"Krv\", 1300, 150);\\n        Spremnik *s = ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        ETF.BrisiSpremnik(s);\\n        ETF.IzlistajSkladiste();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\n    //           \"Vrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n    //         ]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 9,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             '    try\\n    {\\n\\n        Skladiste ETF;\\n        Spremnik *s = ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        ETF.BrisiSpremnik(s);\\n        ETF.DajNajtezi().Ispisi();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }\\n',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\"Skladiste je prazno\"]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 10,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             '    try\\n    {\\n\\n        Skladiste ETF;\\n        Spremnik *s = ETF.DodajSpremnik(new Vreca(0.5, \"Secer\", 40), true);\\n        ETF.BrisiSpremnik(s);\\n        ETF.DajNajlaksi().Ispisi();\\n    }\\n    catch(std::range_error re)\\n    {\\n        std::cout << re.what();\\n    }\\n',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\"Skladiste je prazno\"]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 11,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             '    try\\n    {\\n\\n        Skladiste ETF;\\n        ETF.UcitajIzDatoteke(\"dummy.txt\");\\n        ETF.IzlistajSkladiste();\\n    }\\n    catch(std::logic_error le)\\n    {\\n        std::cout << le.what();\\n    }\\n',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\"Trazena datoteka ne postoji\"]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 12,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             'Skladiste ETF;\\nETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\nETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\nETF.DodajBure(5, \"Krv\", 1300, 150);\\nSkladiste ETF1(std::move(ETF));\\nSkladiste ETF2;\\nETF2 = std::move(ETF1);\\nETF2.IzlistajSkladiste();',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\n    //           \"Vrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n    //         ]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     },\n    //     {\n    //       id: 13,\n    //       patch: {\n    //         position: \"main\",\n    //         code:\n    //             'Skladiste ETF;\\nETF.DodajSanduk(50, \"Voce\", {1,3,5,6});\\nETF.DodajVrecu(0.1, \"Brasno\", 25.5);\\nETF.DodajBure(5, \"Krv\", 1300, 150);\\nSkladiste ETF1(ETF);\\nSkladiste ETF2;\\nETF2 = ETF1;\\nETF2.IzlistajSkladiste();',\n    //         use_markers: true\n    //       },\n    //       \"compile[debug]\": {},\n    //       execute: {\n    //         expect: [\n    //           \"Vrsta spremnika: Bure\\nSadrzaj: Krv\\nVlastita tezina: 5 (kg)\\nSpecificna tezina tecnosti: 1300 (kg/m^3)\\nZapremina tecnosti: 150 (l)\\nUkupna tezina: 200 (kg)\\nVrsta spremnika: Sanduk\\nSadrzaj: Voce\\nTezine predmeta: 1 3 5 6 (kg)\\nVlastita tezina: 50 (kg)\\nUkupna tezina: 65 (kg)\\nVrsta spremnika: Vreca\\nSadrzaj: Brasno\\nVlastita tezina: 0.1 (kg)\\nTezina pohranjene materije: 25.5 (kg)\\nUkupna tezina: 25.6 (kg)\"\n    //         ]\n    //       },\n    //       debug: {},\n    //       \"profile[memcheck]\": {},\n    //       \"profile[sgcheck]\": {}\n    //     }\n    //   ]\n    // }));\n    this.registerListener();\n  },\n  methods: {\n    registerListener() {\n      const button = document.getElementById(\"generator-frame\").contentWindow.document.getElementById(\"export-button\");\n      if (button === null) {\n        setTimeout(() => {\n          this.registerListener();\n        }, 1000);\n      } else {\n        button.addEventListener(\"click\", ()=>{\n          this.saveClicked();\n        })\n        console.log(\"successfully registered\")\n      }\n    },\n    saveClicked() {\n      console.log(\"Save clicked\");\n      const conf = JSON.parse(localStorage.getItem('.autotest-content'));\n      console.log(conf);\n    }\n  }\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./About.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./About.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./About.vue?vue&type=template&id=bc4666d8&\"\nimport script from \"./About.vue?vue&type=script&lang=js&\"\nexport * from \"./About.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\nimport { VCard } from 'vuetify/lib/components/VCard';\nimport { VCol } from 'vuetify/lib/components/VGrid';\nimport { VContainer } from 'vuetify/lib/components/VGrid';\nimport { VRow } from 'vuetify/lib/components/VGrid';\ninstallComponents(component, {VBtn,VCard,VCol,VContainer,VRow})\n"],"sourceRoot":""}